4e9764619daa60018300293e6a36adab
_getJestObj().mock('../../src/persistence', () => ({
  getItem: jest.fn(),
  updateItem: jest.fn()
}));
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const db = require('../../src/persistence');
const updateItem = require('../../src/routes/updateItem');
const ITEM = {
  id: 12345
};
test('it updates items correctly', async () => {
  const req = {
    params: {
      id: 1234
    },
    body: {
      name: 'New title',
      completed: false
    }
  };
  const res = {
    send: jest.fn()
  };
  db.getItem.mockReturnValue(Promise.resolve(ITEM));
  await updateItem(req, res);
  expect(db.updateItem.mock.calls.length).toBe(1);
  expect(db.updateItem.mock.calls[0][0]).toBe(req.params.id);
  expect(db.updateItem.mock.calls[0][1]).toEqual({
    name: 'New title',
    completed: false
  });
  expect(db.getItem.mock.calls.length).toBe(1);
  expect(db.getItem.mock.calls[0][0]).toBe(req.params.id);
  expect(res.send.mock.calls[0].length).toBe(1);
  expect(res.send.mock.calls[0][0]).toEqual(ITEM);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRJdGVtIiwiamVzdCIsImZuIiwidXBkYXRlSXRlbSIsInJlcXVpcmUiLCJkYiIsIklURU0iLCJpZCIsInRlc3QiLCJyZXEiLCJwYXJhbXMiLCJib2R5IiwibmFtZSIsImNvbXBsZXRlZCIsInJlcyIsInNlbmQiLCJtb2NrUmV0dXJuVmFsdWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsImV4cGVjdCIsImNhbGxzIiwibGVuZ3RoIiwidG9CZSIsInRvRXF1YWwiXSwic291cmNlcyI6WyJ1cGRhdGVJdGVtLnNwZWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGIgPSByZXF1aXJlKCcuLi8uLi9zcmMvcGVyc2lzdGVuY2UnKTtcbmNvbnN0IHVwZGF0ZUl0ZW0gPSByZXF1aXJlKCcuLi8uLi9zcmMvcm91dGVzL3VwZGF0ZUl0ZW0nKTtcbmNvbnN0IElURU0gPSB7IGlkOiAxMjM0NSB9O1xuXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9wZXJzaXN0ZW5jZScsICgpID0+ICh7XG4gICAgZ2V0SXRlbTogamVzdC5mbigpLFxuICAgIHVwZGF0ZUl0ZW06IGplc3QuZm4oKSxcbn0pKTtcblxudGVzdCgnaXQgdXBkYXRlcyBpdGVtcyBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVxID0ge1xuICAgICAgICBwYXJhbXM6IHsgaWQ6IDEyMzQgfSxcbiAgICAgICAgYm9keTogeyBuYW1lOiAnTmV3IHRpdGxlJywgY29tcGxldGVkOiBmYWxzZSB9LFxuICAgIH07XG4gICAgY29uc3QgcmVzID0geyBzZW5kOiBqZXN0LmZuKCkgfTtcblxuICAgIGRiLmdldEl0ZW0ubW9ja1JldHVyblZhbHVlKFByb21pc2UucmVzb2x2ZShJVEVNKSk7XG5cbiAgICBhd2FpdCB1cGRhdGVJdGVtKHJlcSwgcmVzKTtcblxuICAgIGV4cGVjdChkYi51cGRhdGVJdGVtLm1vY2suY2FsbHMubGVuZ3RoKS50b0JlKDEpO1xuICAgIGV4cGVjdChkYi51cGRhdGVJdGVtLm1vY2suY2FsbHNbMF1bMF0pLnRvQmUocmVxLnBhcmFtcy5pZCk7XG4gICAgZXhwZWN0KGRiLnVwZGF0ZUl0ZW0ubW9jay5jYWxsc1swXVsxXSkudG9FcXVhbCh7XG4gICAgICAgIG5hbWU6ICdOZXcgdGl0bGUnLFxuICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICAgIH0pO1xuXG4gICAgZXhwZWN0KGRiLmdldEl0ZW0ubW9jay5jYWxscy5sZW5ndGgpLnRvQmUoMSk7XG4gICAgZXhwZWN0KGRiLmdldEl0ZW0ubW9jay5jYWxsc1swXVswXSkudG9CZShyZXEucGFyYW1zLmlkKTtcblxuICAgIGV4cGVjdChyZXMuc2VuZC5tb2NrLmNhbGxzWzBdLmxlbmd0aCkudG9CZSgxKTtcbiAgICBleHBlY3QocmVzLnNlbmQubW9jay5jYWxsc1swXVswXSkudG9FcXVhbChJVEVNKTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFJQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsT0FBTztFQUN0Q0MsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ2xCQyxVQUFVLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0FBQ3hCLENBQUMsQ0FBQyxDQUFDO0FBQUMsU0FBQUosWUFBQTtFQUFBO0lBQUFHO0VBQUEsSUFBQUcsT0FBQTtFQUFBTixXQUFBLEdBQUFBLENBQUEsS0FBQUcsSUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQVBKLE1BQU1JLEVBQUUsR0FBR0QsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0FBQzNDLE1BQU1ELFVBQVUsR0FBR0MsT0FBTyxDQUFDLDZCQUE2QixDQUFDO0FBQ3pELE1BQU1FLElBQUksR0FBRztFQUFFQyxFQUFFLEVBQUU7QUFBTSxDQUFDO0FBTzFCQyxJQUFJLENBQUMsNEJBQTRCLEVBQUUsWUFBWTtFQUMzQyxNQUFNQyxHQUFHLEdBQUc7SUFDUkMsTUFBTSxFQUFFO01BQUVILEVBQUUsRUFBRTtJQUFLLENBQUM7SUFDcEJJLElBQUksRUFBRTtNQUFFQyxJQUFJLEVBQUUsV0FBVztNQUFFQyxTQUFTLEVBQUU7SUFBTTtFQUNoRCxDQUFDO0VBQ0QsTUFBTUMsR0FBRyxHQUFHO0lBQUVDLElBQUksRUFBRWQsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFBRSxDQUFDO0VBRS9CRyxFQUFFLENBQUNMLE9BQU8sQ0FBQ2dCLGVBQWUsQ0FBQ0MsT0FBTyxDQUFDQyxPQUFPLENBQUNaLElBQUksQ0FBQyxDQUFDO0VBRWpELE1BQU1ILFVBQVUsQ0FBQ00sR0FBRyxFQUFFSyxHQUFHLENBQUM7RUFFMUJLLE1BQU0sQ0FBQ2QsRUFBRSxDQUFDRixVQUFVLENBQUNKLElBQUksQ0FBQ3FCLEtBQUssQ0FBQ0MsTUFBTSxDQUFDLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDL0NILE1BQU0sQ0FBQ2QsRUFBRSxDQUFDRixVQUFVLENBQUNKLElBQUksQ0FBQ3FCLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDRSxJQUFJLENBQUNiLEdBQUcsQ0FBQ0MsTUFBTSxDQUFDSCxFQUFFLENBQUM7RUFDMURZLE1BQU0sQ0FBQ2QsRUFBRSxDQUFDRixVQUFVLENBQUNKLElBQUksQ0FBQ3FCLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDRyxPQUFPLENBQUM7SUFDM0NYLElBQUksRUFBRSxXQUFXO0lBQ2pCQyxTQUFTLEVBQUU7RUFDZixDQUFDLENBQUM7RUFFRk0sTUFBTSxDQUFDZCxFQUFFLENBQUNMLE9BQU8sQ0FBQ0QsSUFBSSxDQUFDcUIsS0FBSyxDQUFDQyxNQUFNLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUM1Q0gsTUFBTSxDQUFDZCxFQUFFLENBQUNMLE9BQU8sQ0FBQ0QsSUFBSSxDQUFDcUIsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUNFLElBQUksQ0FBQ2IsR0FBRyxDQUFDQyxNQUFNLENBQUNILEVBQUUsQ0FBQztFQUV2RFksTUFBTSxDQUFDTCxHQUFHLENBQUNDLElBQUksQ0FBQ2hCLElBQUksQ0FBQ3FCLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsTUFBTSxDQUFDLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDN0NILE1BQU0sQ0FBQ0wsR0FBRyxDQUFDQyxJQUFJLENBQUNoQixJQUFJLENBQUNxQixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ0csT0FBTyxDQUFDakIsSUFBSSxDQUFDO0FBQ25ELENBQUMsQ0FBQyJ9