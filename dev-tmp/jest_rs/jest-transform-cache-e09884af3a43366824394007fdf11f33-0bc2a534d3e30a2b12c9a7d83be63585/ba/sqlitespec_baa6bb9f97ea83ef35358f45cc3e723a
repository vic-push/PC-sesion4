1582666e99556628d1456df458cd59be
const db = require('../../src/persistence/sqlite');
const fs = require('fs');
const location = process.env.SQLITE_DB_LOCATION || '/tmp/todo.db';
const ITEM = {
  id: '7aef3d7c-d301-4846-8358-2a91ec9d6be3',
  name: 'Test',
  completed: false
};
beforeEach(() => {
  if (fs.existsSync(location)) {
    fs.unlinkSync(location);
  }
});
test('it initializes correctly', async () => {
  await db.init();
});
test('it can store and retrieve items', async () => {
  await db.init();
  await db.storeItem(ITEM);
  const items = await db.getItems();
  expect(items.length).toBe(1);
  expect(items[0]).toEqual(ITEM);
});
test('it can update an existing item', async () => {
  await db.init();
  const initialItems = await db.getItems();
  expect(initialItems.length).toBe(0);
  await db.storeItem(ITEM);
  await db.updateItem(ITEM.id, Object.assign({}, ITEM, {
    completed: !ITEM.completed
  }));
  const items = await db.getItems();
  expect(items.length).toBe(1);
  expect(items[0].completed).toBe(!ITEM.completed);
});
test('it can remove an existing item', async () => {
  await db.init();
  await db.storeItem(ITEM);
  await db.removeItem(ITEM.id);
  const items = await db.getItems();
  expect(items.length).toBe(0);
});
test('it can get a single item', async () => {
  await db.init();
  await db.storeItem(ITEM);
  const item = await db.getItem(ITEM.id);
  expect(item).toEqual(ITEM);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkYiIsInJlcXVpcmUiLCJmcyIsImxvY2F0aW9uIiwicHJvY2VzcyIsImVudiIsIlNRTElURV9EQl9MT0NBVElPTiIsIklURU0iLCJpZCIsIm5hbWUiLCJjb21wbGV0ZWQiLCJiZWZvcmVFYWNoIiwiZXhpc3RzU3luYyIsInVubGlua1N5bmMiLCJ0ZXN0IiwiaW5pdCIsInN0b3JlSXRlbSIsIml0ZW1zIiwiZ2V0SXRlbXMiLCJleHBlY3QiLCJsZW5ndGgiLCJ0b0JlIiwidG9FcXVhbCIsImluaXRpYWxJdGVtcyIsInVwZGF0ZUl0ZW0iLCJPYmplY3QiLCJhc3NpZ24iLCJyZW1vdmVJdGVtIiwiaXRlbSIsImdldEl0ZW0iXSwic291cmNlcyI6WyJzcWxpdGUuc3BlYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkYiA9IHJlcXVpcmUoJy4uLy4uL3NyYy9wZXJzaXN0ZW5jZS9zcWxpdGUnKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IGxvY2F0aW9uID0gcHJvY2Vzcy5lbnYuU1FMSVRFX0RCX0xPQ0FUSU9OIHx8ICcvdG1wL3RvZG8uZGInO1xuXG5jb25zdCBJVEVNID0ge1xuICAgIGlkOiAnN2FlZjNkN2MtZDMwMS00ODQ2LTgzNTgtMmE5MWVjOWQ2YmUzJyxcbiAgICBuYW1lOiAnVGVzdCcsXG4gICAgY29tcGxldGVkOiBmYWxzZSxcbn07XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGlmIChmcy5leGlzdHNTeW5jKGxvY2F0aW9uKSkge1xuICAgICAgICBmcy51bmxpbmtTeW5jKGxvY2F0aW9uKTtcbiAgICB9XG59KTtcblxudGVzdCgnaXQgaW5pdGlhbGl6ZXMgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGRiLmluaXQoKTtcbn0pO1xuXG50ZXN0KCdpdCBjYW4gc3RvcmUgYW5kIHJldHJpZXZlIGl0ZW1zJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGRiLmluaXQoKTtcblxuICAgIGF3YWl0IGRiLnN0b3JlSXRlbShJVEVNKTtcblxuICAgIGNvbnN0IGl0ZW1zID0gYXdhaXQgZGIuZ2V0SXRlbXMoKTtcbiAgICBleHBlY3QoaXRlbXMubGVuZ3RoKS50b0JlKDEpO1xuICAgIGV4cGVjdChpdGVtc1swXSkudG9FcXVhbChJVEVNKTtcbn0pO1xuXG50ZXN0KCdpdCBjYW4gdXBkYXRlIGFuIGV4aXN0aW5nIGl0ZW0nLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZGIuaW5pdCgpO1xuXG4gICAgY29uc3QgaW5pdGlhbEl0ZW1zID0gYXdhaXQgZGIuZ2V0SXRlbXMoKTtcbiAgICBleHBlY3QoaW5pdGlhbEl0ZW1zLmxlbmd0aCkudG9CZSgwKTtcblxuICAgIGF3YWl0IGRiLnN0b3JlSXRlbShJVEVNKTtcblxuICAgIGF3YWl0IGRiLnVwZGF0ZUl0ZW0oXG4gICAgICAgIElURU0uaWQsXG4gICAgICAgIE9iamVjdC5hc3NpZ24oe30sIElURU0sIHsgY29tcGxldGVkOiAhSVRFTS5jb21wbGV0ZWQgfSksXG4gICAgKTtcblxuICAgIGNvbnN0IGl0ZW1zID0gYXdhaXQgZGIuZ2V0SXRlbXMoKTtcbiAgICBleHBlY3QoaXRlbXMubGVuZ3RoKS50b0JlKDEpO1xuICAgIGV4cGVjdChpdGVtc1swXS5jb21wbGV0ZWQpLnRvQmUoIUlURU0uY29tcGxldGVkKTtcbn0pO1xuXG50ZXN0KCdpdCBjYW4gcmVtb3ZlIGFuIGV4aXN0aW5nIGl0ZW0nLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZGIuaW5pdCgpO1xuICAgIGF3YWl0IGRiLnN0b3JlSXRlbShJVEVNKTtcblxuICAgIGF3YWl0IGRiLnJlbW92ZUl0ZW0oSVRFTS5pZCk7XG5cbiAgICBjb25zdCBpdGVtcyA9IGF3YWl0IGRiLmdldEl0ZW1zKCk7XG4gICAgZXhwZWN0KGl0ZW1zLmxlbmd0aCkudG9CZSgwKTtcbn0pO1xuXG50ZXN0KCdpdCBjYW4gZ2V0IGEgc2luZ2xlIGl0ZW0nLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZGIuaW5pdCgpO1xuICAgIGF3YWl0IGRiLnN0b3JlSXRlbShJVEVNKTtcblxuICAgIGNvbnN0IGl0ZW0gPSBhd2FpdCBkYi5nZXRJdGVtKElURU0uaWQpO1xuICAgIGV4cGVjdChpdGVtKS50b0VxdWFsKElURU0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEVBQUUsR0FBR0MsT0FBTyxDQUFDLDhCQUE4QixDQUFDO0FBQ2xELE1BQU1DLEVBQUUsR0FBR0QsT0FBTyxDQUFDLElBQUksQ0FBQztBQUN4QixNQUFNRSxRQUFRLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxrQkFBa0IsSUFBSSxjQUFjO0FBRWpFLE1BQU1DLElBQUksR0FBRztFQUNUQyxFQUFFLEVBQUUsc0NBQXNDO0VBQzFDQyxJQUFJLEVBQUUsTUFBTTtFQUNaQyxTQUFTLEVBQUU7QUFDZixDQUFDO0FBRURDLFVBQVUsQ0FBQyxNQUFNO0VBQ2IsSUFBSVQsRUFBRSxDQUFDVSxVQUFVLENBQUNULFFBQVEsQ0FBQyxFQUFFO0lBQ3pCRCxFQUFFLENBQUNXLFVBQVUsQ0FBQ1YsUUFBUSxDQUFDO0VBQzNCO0FBQ0osQ0FBQyxDQUFDO0FBRUZXLElBQUksQ0FBQywwQkFBMEIsRUFBRSxZQUFZO0VBQ3pDLE1BQU1kLEVBQUUsQ0FBQ2UsSUFBSSxDQUFDLENBQUM7QUFDbkIsQ0FBQyxDQUFDO0FBRUZELElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxZQUFZO0VBQ2hELE1BQU1kLEVBQUUsQ0FBQ2UsSUFBSSxDQUFDLENBQUM7RUFFZixNQUFNZixFQUFFLENBQUNnQixTQUFTLENBQUNULElBQUksQ0FBQztFQUV4QixNQUFNVSxLQUFLLEdBQUcsTUFBTWpCLEVBQUUsQ0FBQ2tCLFFBQVEsQ0FBQyxDQUFDO0VBQ2pDQyxNQUFNLENBQUNGLEtBQUssQ0FBQ0csTUFBTSxDQUFDLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDNUJGLE1BQU0sQ0FBQ0YsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUNLLE9BQU8sQ0FBQ2YsSUFBSSxDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVGTyxJQUFJLENBQUMsZ0NBQWdDLEVBQUUsWUFBWTtFQUMvQyxNQUFNZCxFQUFFLENBQUNlLElBQUksQ0FBQyxDQUFDO0VBRWYsTUFBTVEsWUFBWSxHQUFHLE1BQU12QixFQUFFLENBQUNrQixRQUFRLENBQUMsQ0FBQztFQUN4Q0MsTUFBTSxDQUFDSSxZQUFZLENBQUNILE1BQU0sQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBRW5DLE1BQU1yQixFQUFFLENBQUNnQixTQUFTLENBQUNULElBQUksQ0FBQztFQUV4QixNQUFNUCxFQUFFLENBQUN3QixVQUFVLENBQ2ZqQixJQUFJLENBQUNDLEVBQUUsRUFDUGlCLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFbkIsSUFBSSxFQUFFO0lBQUVHLFNBQVMsRUFBRSxDQUFDSCxJQUFJLENBQUNHO0VBQVUsQ0FBQyxDQUMxRCxDQUFDO0VBRUQsTUFBTU8sS0FBSyxHQUFHLE1BQU1qQixFQUFFLENBQUNrQixRQUFRLENBQUMsQ0FBQztFQUNqQ0MsTUFBTSxDQUFDRixLQUFLLENBQUNHLE1BQU0sQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQzVCRixNQUFNLENBQUNGLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQ1AsU0FBUyxDQUFDLENBQUNXLElBQUksQ0FBQyxDQUFDZCxJQUFJLENBQUNHLFNBQVMsQ0FBQztBQUNwRCxDQUFDLENBQUM7QUFFRkksSUFBSSxDQUFDLGdDQUFnQyxFQUFFLFlBQVk7RUFDL0MsTUFBTWQsRUFBRSxDQUFDZSxJQUFJLENBQUMsQ0FBQztFQUNmLE1BQU1mLEVBQUUsQ0FBQ2dCLFNBQVMsQ0FBQ1QsSUFBSSxDQUFDO0VBRXhCLE1BQU1QLEVBQUUsQ0FBQzJCLFVBQVUsQ0FBQ3BCLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBRTVCLE1BQU1TLEtBQUssR0FBRyxNQUFNakIsRUFBRSxDQUFDa0IsUUFBUSxDQUFDLENBQUM7RUFDakNDLE1BQU0sQ0FBQ0YsS0FBSyxDQUFDRyxNQUFNLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNoQyxDQUFDLENBQUM7QUFFRlAsSUFBSSxDQUFDLDBCQUEwQixFQUFFLFlBQVk7RUFDekMsTUFBTWQsRUFBRSxDQUFDZSxJQUFJLENBQUMsQ0FBQztFQUNmLE1BQU1mLEVBQUUsQ0FBQ2dCLFNBQVMsQ0FBQ1QsSUFBSSxDQUFDO0VBRXhCLE1BQU1xQixJQUFJLEdBQUcsTUFBTTVCLEVBQUUsQ0FBQzZCLE9BQU8sQ0FBQ3RCLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQ3RDVyxNQUFNLENBQUNTLElBQUksQ0FBQyxDQUFDTixPQUFPLENBQUNmLElBQUksQ0FBQztBQUM5QixDQUFDLENBQUMifQ==